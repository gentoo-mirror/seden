--- configure.ac	2012-04-26 07:05:20.069141755 +0200
+++ configure.ac	2012-04-26 07:17:10.785820884 +0200
@@ -647,15 +647,15 @@
 AC_MSG_CHECKING([whether to use CPU-specific optimizations])
 AC_ARG_ENABLE([cpu-specific-optimizations],
     [AC_HELP_STRING([--enable-cpu-specific-optimizations=level],
-	[enable CPU-specific optimizations; recognized levels are `no',
-	`minimum' or `min', `maximum' or `max', `native' (default MINIMUM);
-	the `minimum' option selects optimizations which are likely to be 
-	supported by reasonably modern hardware, thus making the resulting 
-	executables fairly portable; use the `maximum' option with caution 
-	since code for one processor will not work with earlier processors
-	(for example, Intel 686-specific code will not work with a 586). The
-	`native' option select optimizations specific for the compiling machine
-	(thus giving a fairly unportable executable).])],
+	[enable CPU-specific optimizations; this option is ignored in `custom'
+	build mode. Recognized levels are `no', `minimum' or `min', `maximum'
+	or `max', `native' (default MINIMUM); the `minimum' option selects
+	optimizations which are likely to be supported by reasonably modern
+	hardware, thus making the resulting	executables fairly portable; use
+	the `maximum' option with caution since code for one processor will not
+	work with earlier processors	(for example, Intel 686-specific code will
+	not work with a 586). The	`native' option select optimizations specific
+	for the compiling machine	(thus giving a fairly unportable executable).])],
     [case $enable_cpu_specific_optimizations in
 	yes|min) enable_cpu_specific_optimizations=minimum ;;
 	max) enable_cpu_specific_optimizations=maximum ;;
@@ -668,8 +668,7 @@
     *) CS_MSG_ERROR([unrecognized option; use `no', `minimum', `maximum' or `native'])
        ;;
 esac
-
-AS_IF([test $enable_cpu_specific_optimizations != no],
+AS_IF([test $enable_cpu_specific_optimizations != no -a "$cs_build_mode$" = !"custom"],
     [AC_CACHE_CHECK([for code generation flags], [cs_cv_prog_cxx_code_gen],
 	[cs_cv_prog_cxx_code_gen=no
 	AS_IF([test $enable_cpu_specific_optimizations = native],
@@ -779,6 +778,14 @@
 #------------------------------------------------------------------------------
 # Determine build mode; either "optimize", "debug", or "profile".
 #------------------------------------------------------------------------------
+# Update, 2012-04-24, Sven Eden:
+# On source based distributions like Gentoo Linux, CFLAGS, CXXFLAGS and LDFLAGS
+# are handled globally. Extending them with presets is a bad idea, as those
+# flags can become very lengthy, eventually crashing Jam.
+# Solution: Add a "custom" mode, that only sets what is absolutely necessary
+# and thus relies on user input. "optimize", however, should stay being the
+# default.
+#------------------------------------------------------------------------------
 AC_ARG_ENABLE([optimize], [AC_HELP_STRING([--enable-optimize],
     [build with optimizations enabled (default YES);
 	same as --enable-mode=optimize])],
@@ -794,14 +801,19 @@
 	same as --enable-mode=profile])],
     [test "$enableval" = "yes" && cs_build_mode=profile])
 
+AC_ARG_ENABLE([custom], [AC_HELP_STRING([--enable-custom],
+    [build without special C[XX]FLAGS (default NO);
+	same as --enable-mode=custom])],
+    [test "$enableval" = "yes" && cs_build_mode=custom])
+
 AC_ARG_ENABLE([mode], [AC_HELP_STRING([--enable-mode=mode],
-    [set build mode; recognized modes are `optimize', `debug', `profile'
+    [set build mode; recognized modes are `optimize', `debug', `profile', `custom'
 	(default OPTIMIZE)])],
     [case $enableval in
-	optimize|debug|profile) cs_build_mode=$enableval ;;
+	optimize|debug|profile|custom) cs_build_mode=$enableval ;;
 	*) CS_MSG_ERROR([m4_text_wrap(
 	    [unrecognized mode --enable-mode=$enableval;
-	    use `optimize', `debug', or `profile'], [    ], [[]], [60])]) ;;
+	    use `optimize', `debug', `profile' or `custom'], [    ], [[]], [60])]) ;;
     esac])
 
 AC_MSG_CHECKING([build mode])
@@ -820,10 +832,10 @@
 AC_ARG_ENABLE([separate-debug-info], 
     [AC_HELP_STRING([--enable-separate-debug-info],
         [split debug information into separate files. (default YES if 
-        binutils >= 2.17 and build mode not 'profile', 
+        binutils >= 2.17 and build mode not 'profile' or 'custom', 
 	otherwise default NO)])])
 AS_IF([test -z "$enable_separate_debug_info"], 
-    [AS_IF([test "$cs_build_mode$" = "profile"],
+    [AS_IF([test "$cs_build_mode$" = "profile" -o "$cs_build_mode$" = "custom"],
 	[enable_separate_debug_info=no],
 	[AS_IF([test -z `uname | grep -i CYGWIN`],
 	    [enable_separate_debug_info=$cs_cv_binutils_2_17],
@@ -850,7 +862,7 @@
 AS_IF([test -z "$enable_optimize_mode_debug_info"], 
     [enable_optimize_mode_debug_info=$enable_separate_debug_info])
 AC_MSG_RESULT([$enable_optimize_mode_debug_info])
-AS_IF([test "$enable_optimize_mode_debug_info" != "no"],
+AS_IF([test "$enable_optimize_mode_debug_info" != "no" -a "$cs_build_mode$" != "custom"],
     [CS_EMIT_BUILD_FLAGS([how to enable optimize mode debugging symbols],
 	[cs_cv_prog_cxx_debug_symbols_normal],
 	[CS_CREATE_TUPLE([-g2]) CS_CREATE_TUPLE([-g])],
